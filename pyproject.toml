[project]
name = "diagram-generator"
version = "0.1.0"
description = "AI-powered cloud architecture diagram generator using LLM agents"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "AI Diagram Generator Team", email = "noreply@example.com"}
]
keywords = ["diagrams", "ai", "llm", "fastapi", "cloud", "architecture", "aws"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Visualization",
    "Framework :: FastAPI"
]

dependencies = [
    # Core Dependencies
    "fastapi==0.115.6",
    "uvicorn[standard]==0.34.0",
    "pydantic==2.10.5",
    "pydantic-settings==2.7.1",
    
    # Diagram Generation
    "diagrams==0.24.4",
    "graphviz==0.20.3",
    
    # LLM Integration
    "google-generativeai==0.8.3",
    "openai==1.61.0",
    "httpx==0.28.1",
    
    # Async Support
    "aiofiles==24.1.0",
    
    # Utilities
    "python-dotenv==1.0.1",
    "pyyaml==6.0.2",
    "python-multipart==0.0.19",
    "tenacity==9.0.0",
    
    # Logging & Monitoring
    "python-json-logger==3.2.1",
    "structlog==25.1.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest==8.3.5",
    "pytest-asyncio==0.25.2",
    "pytest-cov==6.0.0",
    "pytest-mock==3.14.0",
    
    # Development Tools
    "black==24.10.0",
    "ruff==0.8.4",
    "mypy==1.13.0",
    "pre-commit==4.0.1",
    
    # Type Stubs
    "types-pyyaml==6.0.12.20240917",
]

[project.urls]
Homepage = "https://github.com/yourusername/diagram-generator"
Documentation = "https://github.com/yourusername/diagram-generator/blob/main/README.md"
Repository = "https://github.com/yourusername/diagram-generator.git"
Issues = "https://github.com/yourusername/diagram-generator/issues"

[project.scripts]
diagram-generator = "src.api.main:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.5",
    "pytest-asyncio>=0.25.2",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "black>=24.10.0",
    "ruff>=0.8.4",
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
    "types-pyyaml>=6.0.12.20240917",
]

[tool.ruff]
line-length = 100
target-version = "py312"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "B905", # zip() without an explicit strict= parameter
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B", "C4"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
pythonpath = [
    "."
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''